/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const socketServer = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, console.log(`Backend server is running on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);

const io = socketServer(server,{
  cors: {
    origin: "*",
    methods: ["GET", "POST", "PUT", "DELETE"],
  },
}
);
// io.on("connection", (socket) => {
//   console.log(`a user connected ${socket.id}`);
  
//   socket.on("event01", (data) => {
//     socket.broadcast.emit("event02", data);
//   });
// });
global.onlineUsers = new Map();

io.on("connection", socket => {
  // console.log(`âš¡: ${socket.id} user just connected!`);
  console.log(socket.connected); 
  global.chatSocket = socket;

  socket.on('event01', (msg, callback) => {
    //1
    console.log("event01", msg);
    
    //2
    callback({
      status: "event01 ok"
    })

    //3
    socket.broadcast.emit("event02", "event02 ok", (response) => {
      console.log("event02 sender status:",response.status); // ok
    });
  });

  socket.on("add-user", (userId) => {
    onlineUsers.set(userId, socket.id);
  })

  socket.on("create-node", (data) => {
    const sendUserSocket = onlineUsers.get(data.to);
    if(sendUserSocket) {
      socket.to(sendUserSocket).emit("node-recieve", data.msg);
    }
  })
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}